import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateVerificationCode, sendVerificationEmail } from '@/lib/email'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç [RESEND] Iniciando reenv√≠o de verificaci√≥n')
    
    const body = await request.json()
    const { email } = body
    
    console.log('üìù [RESEND] Email recibido:', email)

    // Validar campo requerido
    if (!email) {
      console.log('‚ùå [RESEND] Email faltante')
      return NextResponse.json(
        { error: 'Por favor, proporciona tu direcci√≥n de correo electr√≥nico' },
        { status: 400 }
      )
    }

    console.log('‚úÖ [RESEND] Validaciones pasadas, buscando usuario')

    // Buscar usuario por email
    const user = await prisma.user.findUnique({
      where: { email }
    })

    if (!user) {
      console.log('‚ùå [RESEND] Usuario no encontrado:', email)
      return NextResponse.json(
        { error: 'No se encontr√≥ una cuenta con este correo electr√≥nico' },
        { status: 404 }
      )
    }

    console.log('‚úÖ [RESEND] Usuario encontrado, verificando estado')

    // Verificar que el usuario no est√© ya verificado
    if (user.emailVerified) {
      console.log('‚ùå [RESEND] Usuario ya verificado:', email)
      return NextResponse.json(
        { error: 'Tu cuenta ya est√° verificada' },
        { status: 400 }
      )
    }

    console.log('‚úÖ [RESEND] Generando nuevo c√≥digo de verificaci√≥n')

    // Generar nuevo c√≥digo de verificaci√≥n
    const verificationCode = generateVerificationCode()
    const verificationExpires = new Date(Date.now() + 10 * 60 * 1000) // 10 minutos

    // Actualizar usuario con nuevo c√≥digo
    await prisma.user.update({
      where: { id: user.id },
      data: {
        verificationCode,
        verificationExpires
      }
    })

    console.log('‚úÖ [RESEND] C√≥digo actualizado, enviando email')

    // Enviar email de verificaci√≥n
    const emailResult = await sendVerificationEmail(
      email,
      verificationCode,
      user.firstName
    )

    if (!emailResult.success) {
      console.log('‚ùå [RESEND] Error enviando email:', emailResult.error)
      return NextResponse.json(
        { error: 'Error al enviar el email de verificaci√≥n. Int√©ntalo m√°s tarde.' },
        { status: 500 }
      )
    }

    console.log('‚úÖ [RESEND] Email enviado exitosamente')

    return NextResponse.json({
      message: 'C√≥digo de verificaci√≥n reenviado. Revisa tu correo electr√≥nico.'
    })
  } catch (error) {
    console.error('üí• [RESEND] Error completo:', error)
    
    if (error instanceof Error) {
      console.error('üí• [RESEND] Mensaje de error:', error.message)
    }
    
    return NextResponse.json(
      { error: 'Error interno del servidor. Int√©ntalo m√°s tarde.' },
      { status: 500 }
    )
  }
} 