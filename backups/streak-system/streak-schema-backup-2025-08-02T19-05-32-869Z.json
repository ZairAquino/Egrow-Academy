{
  "metadata": {
    "backupDate": "2025-08-02T19:05:32.895Z",
    "description": "Esquema de base de datos para sistema de rachas",
    "models": 8
  },
  "fullSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                      String                 @id @default(cuid())\n  email                   String                 @unique\n  passwordHash            String?\n  firstName               String\n  lastName                String\n  username                String?                @unique\n  profileImage            String?\n  bio                     String?\n  membershipLevel         MembershipLevel        @default(FREE)\n  isActive                Boolean                @default(true)\n  emailVerified           Boolean                @default(false)\n  createdAt               DateTime               @default(now())\n  updatedAt               DateTime               @updatedAt\n  lastLogin               DateTime?\n  verificationCode        String?\n  stripeCustomerId        String?                @unique\n  verificationCodeExpires DateTime?\n  country                 String?\n  hasBeenPremium          Boolean                @default(false)\n  achievements            Achievement[]\n  comments                Comment[]\n  posts                   CommunityPost[]\n  courses                 Course[]               @relation(\"CourseInstructor\")\n  enrollments             Enrollment[]\n  eventRegistrations      EventRegistration[]\n  likes                   Like[]\n  payments                Payment[]\n  promotionInteractions   PromotionInteraction[]\n  ratings                 Rating[]\n  recommendations         Recommendation[]\n  resourceAccessLogs      ResourceAccessLog[]\n  securityLogs            SecurityLog[]\n  sessions                Session[]\n  subscriptions           Subscription[]\n  userBehaviors           UserBehavior[]\n  userPreferences         UserPreference?\n  \n  // Relaciones del sistema de rachas\n  streaks                 UserStreak[]\n  weeklyHistory           UserWeeklyHistory[]\n  streakBadges            UserStreakBadge[]\n  pointsHistory           UserPointsHistory[]\n  recoveryHistory         StreakRecoveryHistory[]\n  weeklyLessonCompletions WeeklyLessonCompletion[]\n\n  @@index([membershipLevel])\n  @@index([email, membershipLevel])\n  @@index([createdAt])\n  @@index([isActive, emailVerified])\n  @@index([stripeCustomerId])\n  @@map(\"users\")\n}\n\nmodel Session {\n  id        String   @id @default(cuid())\n  token     String   @unique\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([expiresAt])\n  @@map(\"sessions\")\n}\n\nmodel Course {\n  id               String         @id @default(cuid())\n  title            String\n  slug             String         @unique\n  description      String?\n  shortDescription String?\n  imageUrl         String?\n  price            Decimal        @default(0)\n  isFree           Boolean        @default(true)\n  requiresAuth     Boolean        @default(true)\n  difficulty       Difficulty?\n  durationHours    Int?\n  lessonsCount     Int            @default(0)\n  studentsCount    Int            @default(0)\n  rating           Decimal        @default(0)\n  status           CourseStatus   @default(DRAFT)\n  createdAt        DateTime       @default(now())\n  updatedAt        DateTime       @updatedAt\n  instructorId     String?\n  category         CourseCategory @default(HABILIDADES_IRREMPLAZABLES)\n  comments         Comment[]\n  instructor       User?          @relation(\"CourseInstructor\", fields: [instructorId], references: [id])\n  enrollments      Enrollment[]\n  lessons          Lesson[]\n  payments         Payment[]\n  ratings          Rating[]\n  \n  // Relaciones del sistema de rachas\n  weeklyLessonCompletions WeeklyLessonCompletion[]\n\n  @@index([status, createdAt])\n  @@index([instructorId])\n  @@index([slug])\n  @@index([category])\n  @@map(\"courses\")\n}\n\nmodel Comment {\n  id        String         @id @default(cuid())\n  content   String\n  type      CommentType\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n  userId    String\n  courseId  String?\n  parentId  String?\n  postId    String?\n  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  parent    Comment?       @relation(\"CommentReplies\", fields: [parentId], references: [id])\n  replies   Comment[]      @relation(\"CommentReplies\")\n  post      CommunityPost? @relation(\"PostComments\", fields: [postId], references: [id], onDelete: Cascade)\n  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  likes     Like[]\n\n  @@index([courseId, createdAt])\n  @@index([userId, createdAt])\n  @@map(\"comments\")\n}\n\nmodel CommunityPost {\n  id        String    @id @default(cuid())\n  title     String\n  content   String\n  category  String?\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  userId    String\n  comments  Comment[] @relation(\"PostComments\")\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  likes     Like[]\n  ratings   Rating[]\n\n  @@index([userId, createdAt])\n  @@index([category, createdAt])\n  @@map(\"community_posts\")\n}\n\nmodel Enrollment {\n  id                 String           @id @default(cuid())\n  enrolledAt         DateTime         @default(now())\n  completedAt        DateTime?\n  progressPercentage Decimal          @default(0)\n  status             EnrollmentStatus @default(ACTIVE)\n  userId             String\n  courseId           String\n  progress           CourseProgress?\n  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, courseId])\n  @@index([userId, status])\n  @@index([courseId, status])\n  @@index([enrolledAt])\n  @@map(\"enrollments\")\n}\n\nmodel CourseProgress {\n  id                 String               @id @default(cuid())\n  enrollmentId       String               @unique\n  currentLesson      Int                  @default(0)\n  progressPercentage Decimal              @default(0)\n  lastAccessed       DateTime             @default(now())\n  startedAt          DateTime             @default(now())\n  completedAt        DateTime?\n  totalTimeSpent     Int                  @default(0)\n  totalSessions      Int                  @default(0)\n  averageSessionTime Int                  @default(0)\n  longestSession     Int                  @default(0)\n  status             CourseProgressStatus @default(IN_PROGRESS)\n  courseSpecificData Json?\n  completedLessons   String[]             @default([])\n  enrollment         Enrollment           @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)\n  lessonProgress     LessonProgress[]\n\n  @@index([enrollmentId])\n  @@index([status, lastAccessed])\n  @@map(\"course_progress\")\n}\n\nmodel LessonProgress {\n  id                 String         @id @default(cuid())\n  courseProgressId   String\n  lessonNumber       Int\n  lessonTitle        String\n  isCompleted        Boolean        @default(false)\n  completedAt        DateTime?\n  timeSpent          Int            @default(0)\n  firstAccessed      DateTime       @default(now())\n  lastAccessed       DateTime       @default(now())\n  accessCount        Int            @default(0)\n  completionAttempts Int            @default(0)\n  userNotes          String?\n  lessonSpecificData Json?\n  courseProgress     CourseProgress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)\n\n  @@unique([courseProgressId, lessonNumber])\n  @@index([courseProgressId, lessonNumber])\n  @@map(\"lesson_progress\")\n}\n\nmodel Like {\n  id        String         @id @default(cuid())\n  createdAt DateTime       @default(now())\n  userId    String\n  commentId String?\n  postId    String?\n  comment   Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)\n  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)\n  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, commentId, postId])\n  @@index([userId, createdAt])\n  @@map(\"likes\")\n}\n\nmodel Lesson {\n  id        String   @id @default(cuid())\n  title     String\n  content   String?\n  videoUrl  String?\n  duration  Int?\n  order     Int\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  courseId  String\n  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@index([courseId, order])\n  @@map(\"lessons\")\n}\n\nmodel Payment {\n  id              String        @id @default(cuid())\n  stripePaymentId String        @unique\n  amount          Int\n  currency        String        @default(\"usd\")\n  status          PaymentStatus\n  paymentMethod   String?\n  description     String?\n  metadata        Json?\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n  userId          String\n  courseId        String?\n  subscriptionId  String?\n  course          Course?       @relation(fields: [courseId], references: [id])\n  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])\n  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, createdAt])\n  @@index([status, createdAt])\n  @@index([courseId])\n  @@map(\"payments\")\n}\n\nmodel Subscription {\n  id                   String             @id @default(cuid())\n  stripeSubscriptionId String             @unique\n  status               SubscriptionStatus\n  currentPeriodStart   DateTime\n  currentPeriodEnd     DateTime\n  cancelAtPeriodEnd    Boolean            @default(false)\n  canceledAt           DateTime?\n  endedAt              DateTime?\n  trialStart           DateTime?\n  trialEnd             DateTime?\n  metadata             Json?\n  createdAt            DateTime           @default(now())\n  updatedAt            DateTime           @updatedAt\n  userId               String\n  priceId              String\n  payments             Payment[]\n  price                Price              @relation(fields: [priceId], references: [id])\n  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, status, currentPeriodEnd])\n  @@index([status, currentPeriodEnd])\n  @@index([userId, status])\n  @@map(\"subscriptions\")\n}\n\nmodel Product {\n  id              String   @id @default(cuid())\n  stripeProductId String   @unique\n  name            String\n  description     String?\n  active          Boolean  @default(true)\n  metadata        Json?\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  prices          Price[]\n\n  @@index([active])\n  @@map(\"products\")\n}\n\nmodel Price {\n  id              String           @id @default(cuid())\n  stripePriceId   String           @unique\n  active          Boolean          @default(true)\n  currency        String           @default(\"usd\")\n  type            PriceType\n  unitAmount      Int?\n  interval        BillingInterval?\n  intervalCount   Int?\n  trialPeriodDays Int?\n  metadata        Json?\n  createdAt       DateTime         @default(now())\n  updatedAt       DateTime         @updatedAt\n  productId       String\n  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)\n  subscriptions   Subscription[]\n\n  @@index([active, productId])\n  @@map(\"prices\")\n}\n\nmodel Resource {\n  id               String              @id @default(cuid())\n  title            String\n  slug             String              @unique\n  description      String?\n  shortDescription String?\n  imageUrl         String?\n  category         ResourceCategory\n  type             ResourceType\n  author           String?\n  fileUrl          String?\n  requiresAuth     Boolean             @default(true)\n  isFree           Boolean             @default(false)\n  rating           Decimal             @default(0)\n  downloadsCount   Int                 @default(0)\n  status           ResourceStatus      @default(DRAFT)\n  createdAt        DateTime            @default(now())\n  updatedAt        DateTime            @updatedAt\n  accessLogs       ResourceAccessLog[]\n  topics           ResourceTopic[]\n\n  @@index([category, status])\n  @@index([status, createdAt])\n  @@map(\"resources\")\n}\n\nmodel ResourceTopic {\n  id          String   @id @default(cuid())\n  title       String\n  description String?\n  order       Int      @default(0)\n  resourceId  String\n  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)\n\n  @@unique([resourceId, title])\n  @@map(\"resource_topics\")\n}\n\nmodel ResourceAccessLog {\n  id         String   @id @default(cuid())\n  userId     String\n  resourceId String\n  accessedAt DateTime @default(now())\n  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, accessedAt])\n  @@index([resourceId, accessedAt])\n  @@map(\"resource_access_logs\")\n}\n\nmodel Event {\n  id              String              @id @default(cuid())\n  title           String\n  description     String?\n  type            EventType\n  createdAt       DateTime            @default(now())\n  updatedAt       DateTime            @updatedAt\n  currentCapacity Int                 @default(0)\n  endDate         DateTime?\n  isFree          Boolean             @default(true)\n  location        String?\n  maxCapacity     Int?\n  price           Decimal             @default(0)\n  startDate       DateTime?\n  status          String              @default(\"UPCOMING\")\n  registrations   EventRegistration[]\n\n  @@index([startDate, status])\n  @@index([type, status])\n  @@map(\"events\")\n}\n\nmodel EventRegistration {\n  id           String   @id @default(cuid())\n  userId       String\n  eventId      String\n  registeredAt DateTime @default(now())\n  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, eventId])\n  @@index([eventId, registeredAt])\n  @@index([userId, registeredAt])\n  @@map(\"event_registrations\")\n}\n\nmodel Rating {\n  id        String         @id @default(cuid())\n  rating    Int\n  type      RatingType\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n  userId    String\n  courseId  String?\n  postId    String?\n  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)\n  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)\n  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([courseId, rating])\n  @@index([userId, type])\n  @@map(\"ratings\")\n}\n\nmodel SecurityLog {\n  id        String   @id @default(cuid())\n  event     String\n  details   Json?\n  ipAddress String?\n  userAgent String?\n  createdAt DateTime @default(now())\n  userId    String?\n  user      User?    @relation(fields: [userId], references: [id])\n\n  @@index([event, createdAt])\n  @@index([userId, createdAt])\n  @@map(\"security_logs\")\n}\n\nmodel Promotion {\n  id                 String                 @id @default(cuid())\n  type               PromotionType\n  title              String\n  description        String?\n  ctaText            String\n  ctaUrl             String\n  imageUrl           String?\n  isActive           Boolean                @default(true)\n  startDate          DateTime?\n  endDate            DateTime?\n  priority           Int                    @default(5)\n  targetAudience     TargetAudience         @default(ALL)\n  maxImpressions     Int?\n  currentImpressions Int                    @default(0)\n  createdAt          DateTime               @default(now())\n  updatedAt          DateTime               @updatedAt\n  interactions       PromotionInteraction[]\n\n  @@index([type, isActive])\n  @@index([startDate, endDate])\n  @@index([priority])\n  @@map(\"promotions\")\n}\n\nmodel PromotionInteraction {\n  id          String            @id @default(cuid())\n  promotionId String\n  userId      String?\n  action      InteractionAction\n  sessionId   String\n  pageUrl     String?\n  referrer    String?\n  userAgent   String?\n  createdAt   DateTime          @default(now())\n  ipAddress   String?\n  promotion   Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)\n  user        User?             @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([promotionId, action])\n  @@index([userId, createdAt])\n  @@index([sessionId])\n  @@map(\"promotion_interactions\")\n}\n\nmodel UserBehavior {\n  id         String   @id @default(cuid())\n  userId     String\n  action     String\n  targetId   String?\n  targetType String?\n  metadata   Json?\n  createdAt  DateTime @default(now())\n  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, action])\n  @@index([targetType, targetId])\n  @@index([createdAt])\n  @@map(\"user_behaviors\")\n}\n\nmodel UserPreference {\n  id              String   @id @default(cuid())\n  userId          String   @unique\n  interests       String[]\n  skillLevel      String?\n  learningGoals   String[]\n  preferredTopics String[]\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_preferences\")\n}\n\nmodel Recommendation {\n  id         String    @id @default(cuid())\n  userId     String\n  targetId   String    @map(\"target_id\")\n  targetType String    @map(\"target_type\")\n  score      Float\n  reason     String\n  isViewed   Boolean   @default(false) @map(\"is_viewed\")\n  isClicked  Boolean   @default(false) @map(\"is_clicked\")\n  createdAt  DateTime  @default(now()) @map(\"created_at\")\n  expiresAt  DateTime? @map(\"expires_at\")\n  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, targetType])\n  @@index([score])\n  @@index([expiresAt])\n  @@map(\"recommendations\")\n}\n\nmodel Achievement {\n  id          String   @id @default(cuid())\n  userId      String\n  type        String\n  title       String\n  description String\n  points      Int      @default(0)\n  badge       String?\n  metadata    Json?\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, type])\n  @@index([createdAt])\n  @@map(\"achievements\")\n}\n\nenum CourseProgressStatus {\n  NOT_STARTED\n  IN_PROGRESS\n  COMPLETED\n  PAUSED\n  ABANDONED\n}\n\nenum MembershipLevel {\n  FREE\n  PREMIUM\n}\n\nenum CourseStatus {\n  DRAFT\n  PUBLISHED\n  ARCHIVED\n}\n\nenum CourseCategory {\n  HABILIDADES_IRREMPLAZABLES\n  IA_PARA_EMPRENDER\n  DESARROLLO_WEB\n  MARKETING_DIGITAL\n  PRODUCTIVIDAD\n  FINANZAS_PERSONALES\n  LIDERAZGO\n  INNOVACION_TECNOLOGICA\n}\n\nenum Difficulty {\n  BEGINNER\n  INTERMEDIATE\n  ADVANCED\n}\n\nenum CommentType {\n  COURSE\n  POST\n  RESOURCE\n}\n\nenum EnrollmentStatus {\n  ACTIVE\n  COMPLETED\n  CANCELLED\n  PAUSED\n}\n\nenum PaymentStatus {\n  PENDING\n  SUCCEEDED\n  FAILED\n  CANCELED\n  REFUNDED\n}\n\nenum SubscriptionStatus {\n  ACTIVE\n  CANCELED\n  INCOMPLETE\n  INCOMPLETE_EXPIRED\n  PAST_DUE\n  TRIALING\n  UNPAID\n}\n\nenum PriceType {\n  ONE_TIME\n  RECURRING\n}\n\nenum BillingInterval {\n  DAY\n  WEEK\n  MONTH\n  YEAR\n}\n\nenum ResourceCategory {\n  WEBINAR\n  MANUAL\n  TUTORIAL\n  PAPER\n  HERRAMIENTA\n  DATASET\n  PODCAST\n  LIBRO\n  EBOOK\n  VIDEO\n  TEMPLATE\n  TOOL\n  GUIDE\n  CASE_STUDY\n  WHITEPAPER\n  CHECKLIST\n  WORKSHOP\n  ULTIMO_WEBINAR\n  EN_VIVO\n}\n\nenum ResourceType {\n  PDF\n  VIDEO\n  AUDIO\n  IMAGE\n  DOCUMENT\n  PRESENTATION\n  SPREADSHEET\n  ARCHIVE\n  LINK\n  OTHER\n}\n\nenum ResourceStatus {\n  DRAFT\n  PUBLISHED\n  ARCHIVED\n}\n\nenum EventType {\n  LANZAMIENTO\n  WORKSHOP\n  WEBINAR\n  MASTERCLASS\n  MEETUP\n  CONFERENCE\n  COURSE_LAUNCH\n  Q_A\n  NETWORKING\n}\n\nenum RatingType {\n  COURSE\n  POST\n  RESOURCE\n}\n\nenum PromotionType {\n  PREMIUM_SUBSCRIPTION\n  NEW_COURSE\n  SPECIAL_OFFER\n}\n\nenum TargetAudience {\n  ALL\n  NON_PREMIUM\n  SPECIFIC_COURSE_VIEWERS\n  NEW_USERS\n}\n\nenum InteractionAction {\n  IMPRESSION\n  CLICK\n  CLOSE\n  CONVERSION\n}\n\nenum StreakBadgeLevel {\n  PRINCIPIANTE\n  ESTUDIANTE\n  DEDICADO\n  EN_LLAMAS\n  IMPARABLE\n  MAESTRO\n  LEYENDA\n}\n\nenum PointTransactionType {\n  WEEKLY_GOAL\n  BONUS_LESSONS\n  DIVERSITY_BONUS\n  STREAK_BONUS\n  RECOVERY_SPENT\n  ADMIN_ADJUSTMENT\n}\n\n// ==========================================\n// SISTEMA DE RACHAS Y GAMIFICACIÓN\n// ==========================================\n\nmodel UserStreak {\n  id                     String    @id @default(uuid())\n  userId                 String\n  currentWeekLessons     Int       @default(0)\n  weekStartDate          DateTime  @db.Date\n  currentStreak          Int       @default(0)\n  longestStreak          Int       @default(0)\n  totalPoints            Int       @default(0)\n  lifetimePointsEarned   Int       @default(0)\n  pointsSpentOnRecovery  Int       @default(0)\n  lastLessonCompletedAt  DateTime?\n  isCurrentWeekComplete  Boolean   @default(false)\n  lastRecoveryUsed       DateTime?\n  recoveryCount          Int       @default(0)\n  createdAt              DateTime  @default(now())\n  updatedAt              DateTime  @updatedAt\n\n  // Relaciones\n  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, weekStartDate], name: \"user_streaks_unique_user_week\")\n  @@map(\"user_streaks\")\n}\n\nmodel UserWeeklyHistory {\n  id                String   @id @default(uuid())\n  userId            String\n  weekStart         DateTime @db.Date\n  weekEnd           DateTime @db.Date\n  lessonsCompleted  Int      @default(0)\n  coursesUsed       Int      @default(0)\n  goalMet           Boolean  @default(false)\n  pointsEarned      Int      @default(0)\n  streakCountAtEnd  Int      @default(0)\n  createdAt         DateTime @default(now())\n\n  // Relaciones\n  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, weekStart], name: \"user_weekly_history_unique_user_week\")\n  @@map(\"user_weekly_history\")\n}\n\nmodel UserStreakBadge {\n  id               String           @id @default(uuid())\n  userId           String\n  badgeLevel       StreakBadgeLevel\n  earnedAt         DateTime         @default(now())\n  streakWhenEarned Int\n  isActive         Boolean          @default(true)\n\n  // Relaciones\n  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, badgeLevel], name: \"user_streak_badges_unique_user_badge\")\n  @@map(\"user_streak_badges\")\n}\n\nmodel UserPointsHistory {\n  id               String              @id @default(uuid())\n  userId           String\n  pointsEarned     Int\n  transactionType  PointTransactionType\n  reason           String?\n  weekStart        DateTime?           @db.Date\n  lessonsCompleted Int?\n  coursesUsed      Int?\n  metadata         Json?\n  createdAt        DateTime            @default(now())\n\n  // Relaciones\n  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_points_history\")\n}\n\nmodel StreakRecoveryHistory {\n  id                 String           @id @default(uuid())\n  userId             String\n  pointsSpent        Int\n  badgeLevel         StreakBadgeLevel\n  recoveryReason     String?\n  originalStreakLost Int\n  weekMissed         DateTime         @db.Date\n  recoveredAt        DateTime         @default(now())\n\n  // Relaciones\n  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"streak_recovery_history\")\n}\n\nmodel WeeklyLessonCompletion {\n  id                    String   @id @default(uuid())\n  userId                String\n  weekStart             DateTime @db.Date\n  courseId              String\n  lessonsCompletedInWeek Int     @default(0)\n  lastLessonAt          DateTime?\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n\n  // Relaciones\n  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  course                Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, weekStart, courseId], name: \"weekly_lesson_completions_unique\")\n  @@map(\"weekly_lesson_completions\")\n}\n",
  "streakRelatedModels": [
    {
      "name": "enum StreakBadgeLevel",
      "definition": "enum StreakBadgeLevel {\n  PRINCIPIANTE\n  ESTUDIANTE\n  DEDICADO\n  EN_LLAMAS\n  IMPARABLE\n  MAESTRO\n  LEYENDA\n}"
    },
    {
      "name": "enum PointTransactionType",
      "definition": "enum PointTransactionType {\n  WEEKLY_GOAL\n  BONUS_LESSONS\n  DIVERSITY_BONUS\n  STREAK_BONUS\n  RECOVERY_SPENT\n  ADMIN_ADJUSTMENT\n}"
    },
    {
      "name": "model UserStreak",
      "definition": "model UserStreak {\n  id                     String    @id @default(uuid())\n  userId                 String\n  currentWeekLessons     Int       @default(0)\n  weekStartDate          DateTime  @db.Date\n  currentStreak          Int       @default(0)\n  longestStreak          Int       @default(0)\n  totalPoints            Int       @default(0)\n  lifetimePointsEarned   Int       @default(0)\n  pointsSpentOnRecovery  Int       @default(0)\n  lastLessonCompletedAt  DateTime?\n  isCurrentWeekComplete  Boolean   @default(false)\n  lastRecoveryUsed       DateTime?\n  recoveryCount          Int       @default(0)\n  createdAt              DateTime  @default(now())\n  updatedAt              DateTime  @updatedAt"
    },
    {
      "name": "model UserWeeklyHistory",
      "definition": "model UserWeeklyHistory {\n  id                String   @id @default(uuid())\n  userId            String\n  weekStart         DateTime @db.Date\n  weekEnd           DateTime @db.Date\n  lessonsCompleted  Int      @default(0)\n  coursesUsed       Int      @default(0)\n  goalMet           Boolean  @default(false)\n  pointsEarned      Int      @default(0)\n  streakCountAtEnd  Int      @default(0)\n  createdAt         DateTime @default(now())"
    },
    {
      "name": "model UserStreakBadge",
      "definition": "model UserStreakBadge {\n  id               String           @id @default(uuid())\n  userId           String\n  badgeLevel       StreakBadgeLevel\n  earnedAt         DateTime         @default(now())\n  streakWhenEarned Int\n  isActive         Boolean          @default(true)"
    },
    {
      "name": "model UserPointsHistory",
      "definition": "model UserPointsHistory {\n  id               String              @id @default(uuid())\n  userId           String\n  pointsEarned     Int\n  transactionType  PointTransactionType\n  reason           String?\n  weekStart        DateTime?           @db.Date\n  lessonsCompleted Int?\n  coursesUsed      Int?\n  metadata         Json?\n  createdAt        DateTime            @default(now())"
    },
    {
      "name": "model StreakRecoveryHistory",
      "definition": "model StreakRecoveryHistory {\n  id                 String           @id @default(uuid())\n  userId             String\n  pointsSpent        Int\n  badgeLevel         StreakBadgeLevel\n  recoveryReason     String?\n  originalStreakLost Int\n  weekMissed         DateTime         @db.Date\n  recoveredAt        DateTime         @default(now())"
    },
    {
      "name": "model WeeklyLessonCompletion",
      "definition": "model WeeklyLessonCompletion {\n  id                    String   @id @default(uuid())\n  userId                String\n  weekStart             DateTime @db.Date\n  courseId              String\n  lessonsCompletedInWeek Int     @default(0)\n  lastLessonAt          DateTime?\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt"
    }
  ]
}