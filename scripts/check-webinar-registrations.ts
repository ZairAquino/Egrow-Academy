import { prisma } from '../src/lib/prisma';

async function checkWebinarRegistrations() {
  try {
    console.log('üîç VERIFICANDO REGISTROS DE WEBINAR EN PRODUCCI√ìN');
    console.log('‚è∞ Hora actual:', new Date().toISOString());

    // Buscar webinars de hoy
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);

    const webinars = await prisma.webinar.findMany({
      where: {
        dateTime: {
          gte: startOfDay,
          lt: endOfDay
        }
      },
      include: {
        registrations: {
          include: {
            user: {
              select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
                emailVerified: true
              }
            }
          }
        }
      }
    });

    console.log(`\nüìä Webinars encontrados hoy: ${webinars.length}`);

    for (const webinar of webinars) {
      console.log(`\nüéØ WEBINAR: ${webinar.title}`);
      console.log(`üìÖ Fecha/Hora: ${webinar.dateTime}`);
      console.log(`üìç Estado: ${webinar.isActive ? 'Activo' : 'Inactivo'}`);
      console.log(`üìù Slug: ${webinar.slug}`);
      
      const totalRegistrations = webinar.registrations.length;
      const confirmedRegistrations = webinar.registrations.filter(r => r.isConfirmed).length;
      const unconfirmedRegistrations = webinar.registrations.filter(r => !r.isConfirmed).length;
      
      console.log(`\nüë• ESTAD√çSTICAS DE REGISTRO:`);
      console.log(`üìä Total registros: ${totalRegistrations}`);
      console.log(`‚úÖ Confirmados: ${confirmedRegistrations}`);
      console.log(`‚ö†Ô∏è Sin confirmar: ${unconfirmedRegistrations}`);

      if (totalRegistrations > 0) {
        console.log(`\nüìã DETALLE DE REGISTROS:`);
        webinar.registrations.forEach((reg, index) => {
          const fullName = `${reg.user.firstName || ''} ${reg.user.lastName || ''}`.trim() || 'Sin nombre';
          console.log(`${index + 1}. ${reg.user.email} (${fullName})`);
          console.log(`   - Confirmado: ${reg.isConfirmed ? '‚úÖ S√ç' : '‚ùå NO'}`);
          console.log(`   - Email verificado: ${reg.user.emailVerified ? '‚úÖ S√ç' : '‚ùå NO'}`);
          console.log(`   - Fecha registro: ${reg.createdAt}`);
        });

        // Mostrar registros no confirmados que podr√≠an confirmarse
        const unconfirmed = webinar.registrations.filter(r => !r.isConfirmed);
        if (unconfirmed.length > 0) {
          console.log(`\n‚ö†Ô∏è REGISTROS SIN CONFIRMAR:`);
          unconfirmed.forEach((reg, index) => {
            console.log(`${index + 1}. ${reg.user.email} - ID: ${reg.id}`);
          });
        }
      } else {
        console.log(`‚ùå NO HAY REGISTROS PARA ESTE WEBINAR`);
      }
    }

    // Verificar si el cron job se ejecut√≥
    console.log(`\nüîç VERIFICANDO HISTORIAL DE CRON JOBS...`);
    
    // Buscar en los metadatos si hay registros de env√≠o
    const webinarsWithMetadata = await prisma.webinar.findMany({
      where: {
        dateTime: {
          gte: startOfDay,
          lt: endOfDay
        }
      },
      select: {
        id: true,
        title: true,
        // metadata: true // Si el campo existe
      }
    });

    console.log(`\nüìä RESUMEN FINAL:`);
    const totalUsers = webinars.reduce((acc, w) => acc + w.registrations.length, 0);
    const totalConfirmed = webinars.reduce((acc, w) => acc + w.registrations.filter(r => r.isConfirmed).length, 0);
    
    console.log(`üë• Total usuarios registrados hoy: ${totalUsers}`);
    console.log(`‚úÖ Total confirmados: ${totalConfirmed}`);
    console.log(`‚ùå Total sin confirmar: ${totalUsers - totalConfirmed}`);

  } catch (error) {
    console.error('‚ùå Error verificando registros:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

checkWebinarRegistrations()
  .then(() => {
    console.log('\n‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });