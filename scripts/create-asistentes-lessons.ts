import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const lessons = [
  // M√ìDULO 1
  { id: 1.1, title: '1.1 Introducci√≥n a los Asistentes Virtuales con IA', order: 1 },
  { id: 1.2, title: '1.2 Beneficios Empresariales Clave', order: 2 },
  { id: 1.3, title: '1.3 Casos de Uso Empresariales', order: 3 },
  { id: 1.4, title: '1.4 Planificaci√≥n Estrat√©gica', order: 4 },
  
  // M√ìDULO 2
  { id: 2.1, title: '2.1 Preparaci√≥n de Documentaci√≥n Empresarial', order: 5 },
  { id: 2.2, title: '2.2 Configuraci√≥n de Procesos', order: 6 },
  { id: 2.3, title: '2.3 Establecimiento de Metodolog√≠as', order: 7 },
  
  // M√ìDULO 3
  { id: 3.1, title: '3.1 Introducci√≥n a Google Gemini', order: 8 },
  { id: 3.2, title: '3.2 Configuraci√≥n de Gemini', order: 9 },
  { id: 3.3, title: '3.3 Creaci√≥n de Asistente con Gemini', order: 10 },
  { id: 3.4, title: '3.4 Optimizaci√≥n de Prompts', order: 11 },
  
  // M√ìDULO 4
  { id: 4.1, title: '4.1 Introducci√≥n a ChatGPT', order: 12 },
  { id: 4.2, title: '4.2 Configuraci√≥n de ChatGPT', order: 13 },
  { id: 4.3, title: '4.3 Creaci√≥n de Asistente con ChatGPT', order: 14 },
  { id: 4.4, title: '4.4 GPTs Personalizados', order: 15 },
  
  // M√ìDULO 5
  { id: 5.1, title: '5.1 Optimizaci√≥n de Rendimiento', order: 16 },
  { id: 5.2, title: '5.2 Pruebas y Validaci√≥n', order: 17 },
  { id: 5.3, title: '5.3 Mantenimiento Continuo', order: 18 },
  { id: 5.4, title: '5.4 Escalabilidad y Mejoras', order: 19 },
  { id: 5.5, title: '5.5 Monitoreo y Analytics', order: 20 },
  { id: 5.6, title: '5.6 Conclusiones y Pr√≥ximos Pasos', order: 21 }
];

async function createAsistentesLessons() {
  console.log('üîß Creando lecciones para el curso "Asistentes virtuales con IA"...');

  try {
    // Verificar conexi√≥n a la base de datos
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida');

    // Buscar el curso en la base de datos
    const course = await prisma.course.findUnique({
      where: { slug: 'asistentes-virtuales-ia' }
    });

    if (!course) {
      console.log('‚ùå Curso no encontrado. Ejecuta primero update-asistentes-course.ts');
      return;
    }

    console.log(`üìã Curso encontrado: "${course.title}"`);

    // Eliminar lecciones existentes
    await prisma.lesson.deleteMany({
      where: { courseId: course.id }
    });
    console.log('üóëÔ∏è Lecciones existentes eliminadas');

    // Crear las 21 lecciones
    for (const lessonData of lessons) {
      await prisma.lesson.create({
        data: {
          title: lessonData.title,
          content: `Contenido de la lecci√≥n ${lessonData.id}: ${lessonData.title}`,
          order: lessonData.order,
          courseId: course.id
        }
      });
      console.log(`‚úÖ Lecci√≥n creada: ${lessonData.title}`);
    }

    // Verificar que se crearon todas las lecciones
    const createdLessons = await prisma.lesson.findMany({
      where: { courseId: course.id },
      orderBy: { order: 'asc' }
    });

    console.log(`\nüìä Resumen:`);
    console.log(`- Lecciones creadas: ${createdLessons.length}`);
    console.log(`- Primera lecci√≥n: ${createdLessons[0]?.title}`);
    console.log(`- √öltima lecci√≥n: ${createdLessons[createdLessons.length - 1]?.title}`);

    console.log('\nüéâ Lecciones creadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante la creaci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script si se llama directamente
if (require.main === module) {
  createAsistentesLessons()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

export { createAsistentesLessons }; 