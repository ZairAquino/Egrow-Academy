import { PrismaClient } from '@prisma/client';
import { sendBulkWebinarReminders } from '../src/lib/email/webinar-email-service';

// Conectar directamente a la rama espec√≠fica
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://neondb_owner:npg_up9eQTmJ0Arw@ep-holy-heart-aeupskea-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
    }
  }
});

async function sendUrgentRemindersNOW() {
  try {
    console.log('üö®üö®üö® ENVIANDO RECORDATORIOS URGENTES AHORA üö®üö®üö®');
    console.log('‚è∞ Hora actual:', new Date().toISOString());
    
    // Conectar
    await prisma.$connect();
    console.log('‚úÖ Conectado a Neon');

    // Buscar el webinar espec√≠fico
    const webinar = await prisma.webinar.findFirst({
      where: {
        slug: 'videos-profesionales-ia'
      },
      include: {
        registrations: {
          where: {
            isConfirmed: true
          },
          include: {
            user: {
              select: {
                email: true,
                firstName: true,
                lastName: true
              }
            }
          }
        }
      }
    });

    if (!webinar) {
      console.log('‚ùå Webinar no encontrado');
      return;
    }

    const confirmedRegistrations = webinar.registrations.length;
    console.log(`\nüéØ WEBINAR: ${webinar.title}`);
    console.log(`üìä Registros confirmados: ${confirmedRegistrations}`);
    console.log(`üÜî ID Webinar: ${webinar.id}`);

    if (confirmedRegistrations === 0) {
      console.log('‚ùå No hay registros confirmados');
      return;
    }

    // Mostrar algunos emails (sin mostrar todos por privacidad)
    console.log(`\nüìß Primeros 5 emails que recibir√°n recordatorio:`);
    webinar.registrations.slice(0, 5).forEach((reg, index) => {
      const name = `${reg.user?.firstName || ''} ${reg.user?.lastName || ''}`.trim() || 'Sin nombre';
      console.log(`${index + 1}. ${reg.user?.email} (${name})`);
    });

    console.log(`\nüö® ENVIANDO RECORDATORIOS A ${confirmedRegistrations} USUARIOS...`);
    console.log('üìß Procesando env√≠o masivo...');

    // Enviar recordatorios
    const result = await sendBulkWebinarReminders(webinar.id);

    console.log(`\n‚úÖ RESULTADO DEL ENV√çO:`);
    console.log(`üìß Exitosos: ${result.success}`);
    console.log(`‚ùå Fallidos: ${result.failed}`);
    
    if (result.details) {
      console.log(`üìù Detalles:`, result.details);
    }

    if (result.success > 0) {
      console.log(`\nüéâ ¬°RECORDATORIOS ENVIADOS EXITOSAMENTE!`);
      console.log(`‚úâÔ∏è ${result.success} usuarios recibieron el recordatorio`);
      console.log(`‚è∞ Webinar comienza en aproximadamente 13 minutos`);
    } else {
      console.log(`\n‚ùå No se pudo enviar ning√∫n recordatorio`);
      if (result.failed > 0) {
        console.log(`‚ùå ${result.failed} env√≠os fallaron`);
      }
    }

  } catch (error) {
    console.error('‚ùå Error enviando recordatorios urgentes:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

sendUrgentRemindersNOW()
  .then(() => {
    console.log('\nüéØ Proceso de recordatorios completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });