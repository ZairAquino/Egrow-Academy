import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function verifyProgress() {
  console.log('üîç Verificando sistema de guardado de progreso...');

  try {
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida');

    // Verificar estructura de la base de datos
    console.log('\nüìä Verificando tablas de progreso...');
    
    // Contar enrollments
    const enrollmentsCount = await prisma.enrollment.count();
    console.log(`üìö Inscripciones totales: ${enrollmentsCount}`);
    
    // Contar progresos
    const progressCount = await prisma.courseProgress.count();
    console.log(`üìà Progresos totales: ${progressCount}`);
    
    // Contar lecciones completadas
    const lessonProgressCount = await prisma.lessonProgress.count();
    console.log(`‚úÖ Progresos de lecciones: ${lessonProgressCount}`);

    // Verificar un ejemplo de progreso
    const sampleProgress = await prisma.courseProgress.findFirst({
      include: {
        enrollment: {
          include: {
            course: true,
            user: true
          }
        }
      }
    });

    if (sampleProgress) {
      console.log('\nüìã Ejemplo de progreso:');
      console.log(`   - Usuario: ${sampleProgress.enrollment.user.name}`);
      console.log(`   - Curso: ${sampleProgress.enrollment.course.title}`);
      console.log(`   - Lecci√≥n actual: ${sampleProgress.currentLesson}`);
      console.log(`   - Lecciones completadas: ${sampleProgress.completedLessons.length}`);
      console.log(`   - Porcentaje: ${sampleProgress.progressPercentage}%`);
      console.log(`   - Estado: ${sampleProgress.status}`);
      console.log(`   - √öltimo acceso: ${sampleProgress.lastAccessed}`);
    } else {
      console.log('\n‚ö†Ô∏è  No hay progresos registrados');
    }

    // Verificar configuraci√≥n del hook
    console.log('\nüîß Verificando configuraci√≥n del hook useCourseProgress...');
    
    // Verificar que el hook est√© configurado correctamente
    const hookFile = await import('fs').then(fs => 
      fs.readFileSync('src/hooks/useCourseProgress.ts', 'utf8')
    );
    
    if (hookFile.includes('saveProgress')) {
      console.log('‚úÖ Funci√≥n saveProgress encontrada en el hook');
    } else {
      console.log('‚ùå Funci√≥n saveProgress no encontrada');
    }
    
    if (hookFile.includes('markLessonComplete')) {
      console.log('‚úÖ Funci√≥n markLessonComplete encontrada en el hook');
    } else {
      console.log('‚ùå Funci√≥n markLessonComplete no encontrada');
    }

    // Verificar endpoint de la API
    console.log('\nüåê Verificando endpoint de la API...');
    
    const apiFile = await import('fs').then(fs => 
      fs.readFileSync('src/app/api/courses/progress/route.ts', 'utf8')
    );
    
    if (apiFile.includes('export async function POST')) {
      console.log('‚úÖ Endpoint POST encontrado');
    } else {
      console.log('‚ùå Endpoint POST no encontrado');
    }
    
    if (apiFile.includes('export async function GET')) {
      console.log('‚úÖ Endpoint GET encontrado');
    } else {
      console.log('‚ùå Endpoint GET no encontrado');
    }

    console.log('\n‚úÖ Verificaci√≥n completada');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script si se llama directamente
if (require.main === module) {
  verifyProgress()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

export { verifyProgress }; 