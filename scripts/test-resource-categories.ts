#!/usr/bin/env tsx

import * as dotenv from 'dotenv'
import { PrismaClient, ResourceCategory } from '@prisma/client'

dotenv.config()

const prisma = new PrismaClient()

async function testResourceCategories() {
  try {
    console.log('üîç Verificando categor√≠as de recursos disponibles...')
    
    // Obtener todas las categor√≠as del enum
    const categories = Object.values(ResourceCategory)
    
    console.log('üìã Categor√≠as disponibles:')
    categories.forEach((category, index) => {
      const isNew = category === 'ULTIMO_WEBINAR' || category === 'EN_VIVO'
      const status = isNew ? 'üÜï' : '‚úÖ'
      console.log(`${index + 1}. ${status} ${category}`)
    })
    
    // Verificar que las nuevas categor√≠as est√°n presentes
    const hasUltimoWebinar = categories.includes(ResourceCategory.ULTIMO_WEBINAR)
    const hasEnVivo = categories.includes(ResourceCategory.EN_VIVO)
    
    console.log('\nüéØ Verificaci√≥n de nuevas categor√≠as:')
    console.log(`   ULTIMO_WEBINAR: ${hasUltimoWebinar ? '‚úÖ Disponible' : '‚ùå No encontrada'}`)
    console.log(`   EN_VIVO: ${hasEnVivo ? '‚úÖ Disponible' : '‚ùå No encontrada'}`)
    
    // Contar recursos por categor√≠a
    console.log('\nüìä Recursos existentes por categor√≠a:')
    for (const category of categories) {
      try {
        const count = await prisma.resource.count({
          where: {
            category: category
          }
        })
        console.log(`   ${category}: ${count} recurso${count !== 1 ? 's' : ''}`)
      } catch (error) {
        console.log(`   ${category}: Error consultando - ${error}`)
      }
    }
    
    console.log('\n‚úÖ Verificaci√≥n completada exitosamente!')
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testResourceCategories()