import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// T√≠tulos correctos seg√∫n el c√≥digo
const correctTitles = [
  '1.1 Introducci√≥n a los Asistentes Virtuales con IA',
  '1.2 Beneficios Empresariales Clave',
  '1.3 Comparaci√≥n: Google Gemini vs ChatGPT',
  '1.4 Planificaci√≥n Estrat√©gica',
  '2.1 Preparaci√≥n de Documentaci√≥n Empresarial',
  '2.2 Configuraci√≥n de Procesos',
  '2.3 Establecimiento de Metodolog√≠as',
  '3.1 Introducci√≥n a Google Gemini',
  '3.2 Configuraci√≥n de Gemini',
  '3.3 Creaci√≥n de Asistente con Gemini',
  '3.4 Optimizaci√≥n de Prompts',
  '4.1 Introducci√≥n a ChatGPT',
  '4.2 Configuraci√≥n de ChatGPT',
  '4.3 Creaci√≥n de Asistente con ChatGPT',
  '4.4 GPTs Personalizados',
  '5.1 Optimizaci√≥n de Rendimiento',
  '5.2 Pruebas y Validaci√≥n',
  '5.3 Mantenimiento Continuo',
  '5.4 Escalabilidad y Mejoras',
  '5.5 Monitoreo y Analytics',
  '5.6 Conclusiones y Pr√≥ximos Pasos'
];

async function fixLessonTitles() {
  console.log('üîß Corrigiendo t√≠tulos de lecciones en la base de datos...');

  try {
    // Verificar conexi√≥n a la base de datos
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n a la base de datos establecida');

    // Buscar el curso en la base de datos
    const course = await prisma.course.findUnique({
      where: { slug: 'asistentes-virtuales-ia' }
    });

    if (!course) {
      console.log('‚ùå Curso no encontrado');
      return;
    }

    console.log(`üìã Curso encontrado: "${course.title}"`);

    // Obtener todas las lecciones del curso
    const dbLessons = await prisma.lesson.findMany({
      where: { courseId: course.id },
      orderBy: { order: 'asc' }
    });

    console.log(`üìö Lecciones encontradas: ${dbLessons.length}`);

    // Actualizar cada lecci√≥n con el t√≠tulo correcto
    for (let i = 0; i < dbLessons.length && i < correctTitles.length; i++) {
      const lesson = dbLessons[i];
      const correctTitle = correctTitles[i];
      
      if (lesson.title !== correctTitle) {
        console.log(`üîÑ Actualizando lecci√≥n ${i + 1}: "${lesson.title}" ‚Üí "${correctTitle}"`);
        
        await prisma.lesson.update({
          where: { id: lesson.id },
          data: { title: correctTitle }
        });
        
        console.log(`‚úÖ Lecci√≥n ${i + 1} actualizada`);
      } else {
        console.log(`‚úÖ Lecci√≥n ${i + 1} ya tiene el t√≠tulo correcto`);
      }
    }

    // Verificar que todas las lecciones est√©n actualizadas
    const updatedLessons = await prisma.lesson.findMany({
      where: { courseId: course.id },
      orderBy: { order: 'asc' },
      select: { title: true, order: true }
    });

    console.log('\nüìä Verificaci√≥n final:');
    updatedLessons.forEach((lesson, index) => {
      const expectedTitle = correctTitles[index];
      const matches = lesson.title === expectedTitle;
      console.log(`${index + 1}. ${matches ? '‚úÖ' : '‚ùå'} | "${lesson.title}"`);
    });

    console.log('\nüéâ T√≠tulos corregidos exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante la correcci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script si se llama directamente
if (require.main === module) {
  fixLessonTitles()
    .then(() => {
      console.log('‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

export { fixLessonTitles }; 