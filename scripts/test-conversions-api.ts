#!/usr/bin/env tsx

/**
 * Script para probar Facebook Conversions API
 * 
 * Este script verifica que la Conversions API est√© funcionando
 * correctamente con el nuevo token de acceso.
 * 
 * Uso: npx tsx scripts/test-conversions-api.ts
 */

import { sendFacebookConversionEvent, webinarEvents } from '../src/lib/facebook-conversions-api';

class ConversionsApiTester {
  private testEvents = [
    {
      name: 'PageView' as const,
      data: {
        content_name: 'Test Page',
        content_category: 'Test',
        content_type: 'test_page'
      }
    },
    {
      name: 'ViewContent' as const,
      data: {
        content_name: 'Test Content',
        content_category: 'Test',
        content_type: 'test_content'
      }
    },
    {
      name: 'Lead' as const,
      data: {
        content_name: 'Test Lead',
        content_category: 'Test',
        content_type: 'test_lead'
      }
    }
  ];

  async runTests() {
    console.log('üß™ Probando Facebook Conversions API...\n');

    console.log('üìã Informaci√≥n de configuraci√≥n:');
    console.log('   ‚Ä¢ Endpoint: https://graph.facebook.com/v18.0/events');
    console.log('   ‚Ä¢ Token: Configurado');
    console.log('   ‚Ä¢ Eventos de prueba: PageView, ViewContent, Lead');

    console.log('\nüéØ Ejecutando pruebas...\n');

    // Probar eventos b√°sicos
    for (const testEvent of this.testEvents) {
      console.log(`üìä Probando evento: ${testEvent.name}`);
      
      try {
        const result = await sendFacebookConversionEvent(
          testEvent.name,
          testEvent.data
        );
        
        if (result) {
          console.log(`‚úÖ ${testEvent.name} - Enviado correctamente`);
        } else {
          console.log(`‚ùå ${testEvent.name} - Error al enviar`);
        }
      } catch (error) {
        console.log(`‚ùå ${testEvent.name} - Error:`, error);
      }
      
      console.log('');
    }

    // Probar eventos espec√≠ficos de webinar
    console.log('üéì Probando eventos de webinar...\n');

    try {
      const webinarPageView = await webinarEvents.trackWebinarPageView(
        'test-webinar-id',
        'Test Webinar'
      );
      console.log('‚úÖ Webinar PageView:', webinarPageView ? 'Enviado' : 'Error');

      const webinarLead = await webinarEvents.trackWebinarLead(
        'test-webinar-id',
        'Test Webinar',
        'test@example.com'
      );
      console.log('‚úÖ Webinar Lead:', webinarLead ? 'Enviado' : 'Error');

      const webinarRegistration = await webinarEvents.trackWebinarRegistration(
        'test-webinar-id',
        'Test Webinar',
        'test@example.com'
      );
      console.log('‚úÖ Webinar Registration:', webinarRegistration ? 'Enviado' : 'Error');

    } catch (error) {
      console.log('‚ùå Error en eventos de webinar:', error);
    }

    console.log('\nüìã Instrucciones para verificar en Meta Business:');
    console.log('\n1. Ir a Meta Business Manager:');
    console.log('   https://business.facebook.com/');

    console.log('\n2. Navegar a:');
    console.log('   ‚Ä¢ Data Sources');
    console.log('   ‚Ä¢ Pixels');
    console.log('   ‚Ä¢ Buscar tu Pixel ID');

    console.log('\n3. En la pesta√±a "Test events":');
    console.log('   ‚Ä¢ Deber√≠as ver eventos en tiempo real');
    console.log('   ‚Ä¢ Los eventos deber√≠an mostrar "Conversions API"');
    console.log('   ‚Ä¢ Deber√≠as ver eventos de prueba');

    console.log('\n4. En la pesta√±a "All Activity":');
    console.log('   ‚Ä¢ Deber√≠as ver eventos hist√≥ricos');
    console.log('   ‚Ä¢ Los eventos deber√≠an tener el dominio correcto');
    console.log('   ‚Ä¢ Deber√≠as ver diferentes tipos de eventos');

    console.log('\n‚ö†Ô∏è  Notas importantes:');
    console.log('   ‚Ä¢ Los eventos pueden tardar 1-2 minutos en aparecer');
    console.log('   ‚Ä¢ Verificar que el token de acceso sea v√°lido');
    console.log('   ‚Ä¢ Verificar que el dominio est√© configurado en Meta');
    console.log('   ‚Ä¢ Los eventos de prueba no afectan las m√©tricas reales');

    console.log('\nüîß Para probar en el sitio web:');
    console.log('\n1. Visitar la p√°gina del webinar:');
    console.log('   https://egrowacademy.com/webinar/videos-profesionales-ia');

    console.log('\n2. Abrir DevTools (F12) y verificar:');
    console.log('   ‚Ä¢ Pesta√±a Console: Logs de Conversions API');
    console.log('   ‚Ä¢ Pesta√±a Network: Peticiones a graph.facebook.com');

    console.log('\n3. Eventos esperados:');
    console.log('   ‚Ä¢ PageView al cargar la p√°gina');
    console.log('   ‚Ä¢ ViewContent despu√©s de 1 segundo');
    console.log('   ‚Ä¢ CustomEvent despu√©s de 2 segundos');

    console.log('\nüéâ Pruebas completadas!');
  }

  async checkConfiguration() {
    console.log('\nüîç Verificando configuraci√≥n...');
    
    console.log('\n1. Verificar token de acceso:');
    console.log('   ‚Ä¢ Token configurado en facebook-conversions-api.ts');
    console.log('   ‚Ä¢ Endpoint configurado correctamente');
    
    console.log('\n2. Verificar componentes:');
    console.log('   ‚Ä¢ FacebookConversionsTracker creado');
    console.log('   ‚Ä¢ WebinarConversionsTracker creado');
    console.log('   ‚Ä¢ Hook useWebinarConversions disponible');
    
    console.log('\n3. Verificar integraci√≥n:');
    console.log('   ‚Ä¢ P√°gina del webinar actualizada');
    console.log('   ‚Ä¢ Eventos configurados correctamente');
    
    console.log('\n‚úÖ Configuraci√≥n verificada correctamente');
  }
}

async function main() {
  const tester = new ConversionsApiTester();
  
  await tester.runTests();
  await tester.checkConfiguration();
  
  console.log('\nüìã Pr√≥ximos pasos:');
  console.log('   1. Verificar eventos en Meta Business');
  console.log('   2. Probar en el sitio web en producci√≥n');
  console.log('   3. Configurar audiencias basadas en eventos');
  console.log('   4. Optimizar campa√±as con datos de conversi√≥n');
}

if (require.main === module) {
  main().catch(console.error);
}

export default ConversionsApiTester; 