import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testContentPage() {
  try {
    console.log('üß™ Probando p√°gina de contenido del curso...');
    
    // 1. Verificar que el curso existe
    const course = await prisma.course.findUnique({
      where: {
        slug: 'guiones-videos-promocionales-ia'
      },
      include: {
        lessons: {
          orderBy: {
            order: 'asc'
          }
        }
      }
    });

    if (!course) {
      console.log('‚ùå Curso no encontrado');
      return;
    }

    console.log('‚úÖ Curso encontrado:', course.title);
    console.log(`üìö Lecciones: ${course.lessons.length}`);

    // 2. Verificar que hay usuarios inscritos
    const enrollments = await prisma.enrollment.findMany({
      where: {
        courseId: course.id
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });

    console.log(`üë• Usuarios inscritos: ${enrollments.length}`);

    // 3. Verificar que las lecciones est√°n bien ordenadas
    const lessons = course.lessons;
    console.log('\nüìã Verificando orden de lecciones:');
    
    lessons.forEach((lesson, index) => {
      console.log(`${index + 1}. ${lesson.title} (Orden: ${lesson.order}, Duraci√≥n: ${lesson.duration}min)`);
    });

    // 4. Verificar que no hay lecciones duplicadas
    const orderNumbers = lessons.map(l => l.order);
    const uniqueOrders = new Set(orderNumbers);
    
    if (orderNumbers.length !== uniqueOrders.size) {
      console.log('‚ö†Ô∏è ADVERTENCIA: Hay lecciones con orden duplicado');
    } else {
      console.log('‚úÖ Orden de lecciones correcto');
    }

    // 5. Verificar que todas las lecciones tienen t√≠tulo y duraci√≥n
    const invalidLessons = lessons.filter(l => !l.title || !l.duration);
    if (invalidLessons.length > 0) {
      console.log('‚ö†Ô∏è ADVERTENCIA: Hay lecciones sin t√≠tulo o duraci√≥n');
      invalidLessons.forEach(l => {
        console.log(`  - ID: ${l.id}, T√≠tulo: ${l.title}, Duraci√≥n: ${l.duration}`);
      });
    } else {
      console.log('‚úÖ Todas las lecciones tienen t√≠tulo y duraci√≥n');
    }

    // 6. Verificar progreso de usuarios
    console.log('\nüìä Verificando progreso de usuarios:');
    enrollments.forEach((enrollment, index) => {
      console.log(`${index + 1}. ${enrollment.user.firstName} ${enrollment.user.lastName}`);
      console.log(`   Email: ${enrollment.user.email}`);
      console.log(`   Estado: ${enrollment.status}`);
      console.log(`   Progreso: ${enrollment.progressPercentage}%`);
    });

    console.log('\nüéØ Resumen:');
    console.log(`- Curso: ${course.title}`);
    console.log(`- Estado: ${course.status}`);
    console.log(`- Lecciones: ${lessons.length}`);
    console.log(`- Usuarios inscritos: ${enrollments.length}`);
    console.log(`- Es gratis: ${course.isFree}`);

    if (course.status === 'PUBLISHED' && lessons.length > 0 && enrollments.length > 0) {
      console.log('‚úÖ La p√°gina de contenido deber√≠a funcionar correctamente');
    } else {
      console.log('‚ö†Ô∏è Puede haber problemas con la p√°gina de contenido');
    }

  } catch (error) {
    console.error('‚ùå Error al probar la p√°gina de contenido:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testContentPage();
