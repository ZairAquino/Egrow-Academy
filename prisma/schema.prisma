generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id              String           @id
  content         String
  type            CommentType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  userId          String
  courseId        String?
  parentId        String?
  postId          String?
  courses         courses?         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  comments        comments?        @relation("commentsTocomments", fields: [parentId], references: [id])
  other_comments  comments[]       @relation("commentsTocomments")
  community_posts community_posts? @relation(fields: [postId], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           likes[]
}

model community_posts {
  id        String     @id
  title     String
  content   String
  category  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  userId    String
  comments  comments[]
  users     users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     likes[]
}

model course_progress {
  id                 String               @id
  enrollmentId       String               @unique
  currentLesson      Int                  @default(0)
  completedLessons   Int[]                @default([])
  progressPercentage Decimal              @default(0)
  lastAccessed       DateTime             @default(now())
  startedAt          DateTime             @default(now())
  completedAt        DateTime?
  totalTimeSpent     Int                  @default(0)
  totalSessions      Int                  @default(0)
  averageSessionTime Int                  @default(0)
  longestSession     Int                  @default(0)
  status             CourseProgressStatus @default(IN_PROGRESS)
  courseSpecificData Json?
  enrollments        enrollments          @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson_progress    lesson_progress[]
}

model courses {
  id               String        @id
  title            String
  slug             String        @unique
  description      String?
  shortDescription String?
  imageUrl         String?
  price            Decimal       @default(0)
  isFree           Boolean       @default(true)
  requiresAuth     Boolean       @default(true)
  difficulty       Difficulty?
  durationHours    Int?
  lessonsCount     Int           @default(0)
  studentsCount    Int           @default(0)
  rating           Decimal       @default(0)
  status           CourseStatus  @default(DRAFT)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  instructorId     String?
  comments         comments[]
  users            users?        @relation(fields: [instructorId], references: [id])
  enrollments      enrollments[]
  lessons          lessons[]
  payments         payments[]
}

model enrollments {
  id                 String           @id
  enrolledAt         DateTime         @default(now())
  completedAt        DateTime?
  progressPercentage Decimal          @default(0)
  status             EnrollmentStatus @default(ACTIVE)
  userId             String
  courseId           String
  course_progress    course_progress?
  courses            courses          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  users              users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model event_registrations {
  id             String    @id
  userId         String
  eventId        String
  registeredAt   DateTime  @default(now())
  reminderSent   Boolean   @default(false)
  reminderSentAt DateTime?
  events         events    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  users          users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model events {
  id                  String                @id
  title               String
  description         String
  date                DateTime
  time                String
  type                EventType
  category            String
  instructor          String
  image               String?
  maxAttendees        Int?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  event_registrations event_registrations[]
}

model lesson_progress {
  id                 String          @id
  courseProgressId   String
  lessonNumber       Int
  lessonTitle        String
  isCompleted        Boolean         @default(false)
  completedAt        DateTime?
  timeSpent          Int             @default(0)
  firstAccessed      DateTime        @default(now())
  lastAccessed       DateTime        @default(now())
  accessCount        Int             @default(0)
  completionAttempts Int             @default(0)
  userNotes          String?
  lessonSpecificData Json?
  course_progress    course_progress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)

  @@unique([courseProgressId, lessonNumber])
}

model lessons {
  id        String   @id
  title     String
  content   String?
  videoUrl  String?
  duration  Int?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  courseId  String
  courses   courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model likes {
  id              String           @id
  createdAt       DateTime         @default(now())
  userId          String
  commentId       String?
  postId          String?
  comments        comments?        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  community_posts community_posts? @relation(fields: [postId], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, postId])
}

model payments {
  id              String         @id
  stripePaymentId String         @unique
  amount          Int
  currency        String         @default("usd")
  status          PaymentStatus
  paymentMethod   String?
  description     String?
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  userId          String
  courseId        String?
  subscriptionId  String?
  courses         courses?       @relation(fields: [courseId], references: [id])
  subscriptions   subscriptions? @relation(fields: [subscriptionId], references: [id])
  users           users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model prices {
  id              String           @id
  stripePriceId   String           @unique
  active          Boolean          @default(true)
  currency        String           @default("usd")
  type            PriceType
  unitAmount      Int?
  interval        BillingInterval?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  productId       String
  products        products         @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions   subscriptions[]
}

model products {
  id              String   @id
  stripeProductId String   @unique
  name            String
  description     String?
  active          Boolean  @default(true)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  prices          prices[]
}

model resource_access_logs {
  id         String    @id
  userId     String
  resourceId String
  accessedAt DateTime  @default(now())
  resources  resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model resource_topics {
  id          String    @id
  title       String
  description String?
  order       Int
  resourceId  String
  resources   resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)
}

model resources {
  id                   String                 @id
  title                String
  slug                 String                 @unique
  description          String?
  shortDescription     String?
  imageUrl             String?
  category             ResourceCategory
  type                 ResourceType
  author               String?
  fileUrl              String?
  requiresAuth         Boolean                @default(true)
  isFree               Boolean                @default(true)
  rating               Decimal                @default(0)
  downloadsCount       Int                    @default(0)
  status               ResourceStatus         @default(DRAFT)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  resource_access_logs resource_access_logs[]
  resource_topics      resource_topics[]
}

model sessions {
  id        String   @id
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptions {
  id                   String             @id
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  userId               String
  priceId              String
  payments             payments[]
  prices               prices             @relation(fields: [priceId], references: [id])
  users                users              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status, currentPeriodEnd])
  @@index([userId, status, currentPeriodEnd])
}

model users {
  id                      String                 @id
  email                   String                 @unique
  passwordHash            String?
  firstName               String
  lastName                String
  username                String?                @unique
  profileImage            String?
  bio                     String?
  membershipLevel         MembershipLevel        @default(FREE)
  isActive                Boolean                @default(true)
  emailVerified           Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime
  lastLogin               DateTime?
  verificationCode        String?
  stripeCustomerId        String?                @unique
  verificationCodeExpires DateTime?
  country                 String?
  hasBeenPremium          Boolean                @default(false)
  comments                comments[]
  community_posts         community_posts[]
  courses                 courses[]
  enrollments             enrollments[]
  event_registrations     event_registrations[]
  likes                   likes[]
  payments                payments[]
  resource_access_logs    resource_access_logs[]
  sessions                sessions[]
  subscriptions           subscriptions[]

  @@index([email, membershipLevel])
  @@index([membershipLevel])
}

enum BillingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum CommentType {
  FORUM
  QUESTION
  COURSE_COMMENT
}

enum CourseProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
  ABANDONED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EventType {
  LANZAMIENTO
  WORKSHOP
  WEBINAR
  MASTERCLASS
  MEETUP
}

enum MembershipLevel {
  FREE
  PREMIUM
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum PriceType {
  ONE_TIME
  RECURRING
}

enum ResourceCategory {
  WEBINAR
  MANUAL
  TUTORIAL
  PAPER
  HERRAMIENTA
  DATASET
  PODCAST
  LIBRO
}

enum ResourceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  LINK
  TOOL
  DATASET
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}
