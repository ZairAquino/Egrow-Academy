// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios (Actualizado para Auth.js)
model User {
  id              String          @id @default(cuid())
  email           String          @unique
  passwordHash    String?         // Opcional para usuarios OAuth
  firstName       String
  lastName        String
  username        String?         @unique
  profileImage    String?
  bio             String?
  membershipLevel MembershipLevel @default(FREE)
  isActive        Boolean         @default(true)
  emailVerified   Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastLogin       DateTime?

  // Relaciones existentes
  comments        Comment[]
  questions       Question[]
  enrollments     Enrollment[]
  posts           CommunityPost[]
  likes           Like[]
  sessions        Session[]
  courses         Course[]        @relation("CourseInstructor")

  // Relaciones para Auth.js
  accounts        Account[]
  sessions_auth   Session_auth[]

  @@map("users")
}

// Tabla para cuentas OAuth (Auth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Tabla para sesiones de Auth.js
model Session_auth {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions_auth")
}

// Tabla para verificaci√≥n de emails (Auth.js)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo de Sesiones (Existente - mantener para compatibilidad)
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id               String       @id @default(cuid())
  title            String
  slug             String       @unique
  description      String?
  shortDescription String?
  imageUrl         String?
  price            Decimal      @default(0)
  isFree           Boolean      @default(true)
  requiresAuth     Boolean      @default(true)
  difficulty       Difficulty?
  durationHours    Int?
  lessonsCount     Int          @default(0)
  studentsCount    Int          @default(0)
  rating           Decimal      @default(0)
  status           CourseStatus @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  instructorId     String?
  comments         Comment[]
  instructor       User?        @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments      Enrollment[]
  lessons          Lesson[]

  @@map("courses")
}

model Comment {
  id         String         @id @default(cuid())
  content    String
  type       CommentType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String
  courseId   String?
  parentId   String?
  questionId String?
  postId     String?
  course     Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent     Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]      @relation("CommentReplies")
  post       CommunityPost? @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  question   Question?      @relation("QuestionComments", fields: [questionId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      Like[]

  @@map("comments")
}

model Question {
  id        String         @id @default(cuid())
  title     String
  content   String
  category  String?
  status    QuestionStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  answers   Comment[]      @relation("QuestionComments")
  likes     Like[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model CommunityPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[] @relation("PostComments")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@map("community_posts")
}

model Enrollment {
  id                 String           @id @default(cuid())
  enrolledAt         DateTime         @default(now())
  completedAt        DateTime?
  progressPercentage Decimal          @default(0)
  status             EnrollmentStatus @default(ACTIVE)
  userId             String
  courseId           String
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Like {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  userId     String
  commentId  String?
  questionId String?
  postId     String?
  comment    Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  question   Question?      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, questionId, postId])
  @@map("likes")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  duration  Int?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

enum MembershipLevel {
  FREE
  PREMIUM
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CommentType {
  FORUM
  QUESTION
  COURSE_COMMENT
}

enum QuestionStatus {
  OPEN
  ANSWERED
  CLOSED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}
