generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  passwordHash            String?
  firstName               String
  lastName                String
  username                String?                @unique
  profileImage            String?
  bio                     String?
  membershipLevel         MembershipLevel        @default(FREE)
  isActive                Boolean                @default(true)
  emailVerified           Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLogin               DateTime?
  verificationCode        String?
  stripeCustomerId        String?                @unique
  verificationCodeExpires DateTime?
  country                 String?
  hasBeenPremium          Boolean                @default(false)
  achievements            Achievement[]
  comments                Comment[]
  posts                   CommunityPost[]
  courses                 Course[]               @relation("CourseInstructor")
  enrollments             Enrollment[]
  eventRegistrations      EventRegistration[]
  likes                   Like[]
  payments                Payment[]
  promotionInteractions   PromotionInteraction[]
  ratings                 Rating[]
  recommendations         Recommendation[]
  resourceAccessLogs      ResourceAccessLog[]
  securityLogs            SecurityLog[]
  sessions                Session[]
  subscriptions           Subscription[]
  userBehaviors           UserBehavior[]
  userPreferences         UserPreference?
  userStreaks             UserStreak[]
  weeklyLessonCompletions WeeklyLessonCompletion[]
  userStreakBadges        UserStreakBadge[]
  userPointsHistory       UserPointsHistory[]
  streakRecoveryHistory   StreakRecoveryHistory[]
  webinarRegistrations    WebinarRegistration[]

  @@index([membershipLevel])
  @@index([email, membershipLevel])
  @@index([createdAt])
  @@index([isActive, emailVerified])
  @@index([stripeCustomerId])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("sessions")
}

model Course {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  description      String?
  shortDescription String?
  imageUrl         String?
  price            Decimal        @default(0)
  isFree           Boolean        @default(true)
  requiresAuth     Boolean        @default(true)
  difficulty       Difficulty?
  durationHours    Int?
  lessonsCount     Int            @default(0)
  studentsCount    Int            @default(0)
  rating           Decimal        @default(0)
  status           CourseStatus   @default(DRAFT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  instructorId     String?
  category         CourseCategory @default(HABILIDADES_IRREMPLAZABLES)
  comments         Comment[]
  instructor       User?          @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments      Enrollment[]
  lessons          Lesson[]
  payments         Payment[]
  ratings          Rating[]

  @@index([status, createdAt])
  @@index([instructorId])
  @@index([slug])
  @@index([category])
  @@map("courses")
}

model Comment {
  id        String         @id @default(cuid())
  content   String
  type      CommentType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  courseId  String?
  parentId  String?
  postId    String?
  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent    Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]      @relation("CommentReplies")
  post      CommunityPost? @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([courseId, createdAt])
  @@index([userId, createdAt])
  @@map("comments")
}

model CommunityPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[] @relation("PostComments")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  ratings   Rating[]

  @@index([userId, createdAt])
  @@index([category, createdAt])
  @@map("community_posts")
}

model Enrollment {
  id                 String           @id @default(cuid())
  enrolledAt         DateTime         @default(now())
  completedAt        DateTime?
  progressPercentage Decimal          @default(0)
  status             EnrollmentStatus @default(ACTIVE)
  userId             String
  courseId           String
  progress           CourseProgress?
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId, status])
  @@index([courseId, status])
  @@index([enrolledAt])
  @@map("enrollments")
}

model CourseProgress {
  id                 String               @id @default(cuid())
  enrollmentId       String               @unique
  currentLesson      Int                  @default(0)
  progressPercentage Decimal              @default(0)
  lastAccessed       DateTime             @default(now())
  startedAt          DateTime             @default(now())
  completedAt        DateTime?
  totalTimeSpent     Int                  @default(0)
  totalSessions      Int                  @default(0)
  averageSessionTime Int                  @default(0)
  longestSession     Int                  @default(0)
  status             CourseProgressStatus @default(IN_PROGRESS)
  courseSpecificData Json?
  completedLessons   String[]             @default([])
  enrollment         Enrollment           @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonProgress     LessonProgress[]

  @@index([enrollmentId])
  @@index([status, lastAccessed])
  @@map("course_progress")
}

model LessonProgress {
  id                 String         @id @default(cuid())
  courseProgressId   String
  lessonNumber       Int
  lessonTitle        String
  isCompleted        Boolean        @default(false)
  completedAt        DateTime?
  timeSpent          Int            @default(0)
  firstAccessed      DateTime       @default(now())
  lastAccessed       DateTime       @default(now())
  accessCount        Int            @default(0)
  completionAttempts Int            @default(0)
  userNotes          String?
  lessonSpecificData Json?
  courseProgress     CourseProgress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)

  @@unique([courseProgressId, lessonNumber])
  @@index([courseProgressId, lessonNumber])
  @@map("lesson_progress")
}

model Like {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  userId    String
  commentId String?
  postId    String?
  comment   Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, postId])
  @@index([userId, createdAt])
  @@map("likes")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  duration  Int?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId, order])
  @@map("lessons")
}

model Payment {
  id              String        @id @default(cuid())
  stripePaymentId String        @unique
  amount          Int
  currency        String        @default("usd")
  status          PaymentStatus
  paymentMethod   String?
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  courseId        String?
  subscriptionId  String?
  course          Course?       @relation(fields: [courseId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([courseId])
  @@map("payments")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               String
  priceId              String
  payments             Payment[]
  price                Price              @relation(fields: [priceId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, currentPeriodEnd])
  @@index([status, currentPeriodEnd])
  @@index([userId, status])
  @@map("subscriptions")
}

model Product {
  id              String   @id @default(cuid())
  stripeProductId String   @unique
  name            String
  description     String?
  active          Boolean  @default(true)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  prices          Price[]

  @@index([active])
  @@map("products")
}

model Price {
  id              String           @id @default(cuid())
  stripePriceId   String           @unique
  active          Boolean          @default(true)
  currency        String           @default("usd")
  type            PriceType
  unitAmount      Int?
  interval        BillingInterval?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productId       String
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]

  @@index([active, productId])
  @@map("prices")
}

model Resource {
  id               String              @id @default(cuid())
  title            String
  slug             String              @unique
  description      String?
  shortDescription String?
  imageUrl         String?
  category         ResourceCategory
  type             ResourceType
  author           String?
  fileUrl          String?
  requiresAuth     Boolean             @default(true)
  isFree           Boolean             @default(false)
  rating           Decimal             @default(0)
  downloadsCount   Int                 @default(0)
  status           ResourceStatus      @default(DRAFT)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  accessLogs       ResourceAccessLog[]
  topics           ResourceTopic[]

  @@index([category, status])
  @@index([status, createdAt])
  @@map("resources")
}

model ResourceTopic {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([resourceId, title])
  @@map("resource_topics")
}

model ResourceAccessLog {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  accessedAt DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, accessedAt])
  @@index([resourceId, accessedAt])
  @@map("resource_access_logs")
}

model Event {
  id              String              @id @default(cuid())
  title           String
  description     String?
  type            EventType
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  currentCapacity Int                 @default(0)
  endDate         DateTime?
  isFree          Boolean             @default(true)
  location        String?
  maxCapacity     Int?
  price           Decimal             @default(0)
  startDate       DateTime?
  status          String              @default("UPCOMING")
  registrations   EventRegistration[]

  @@index([startDate, status])
  @@index([type, status])
  @@map("events")
}

model EventRegistration {
  id           String   @id @default(cuid())
  userId       String
  eventId      String
  registeredAt DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId, registeredAt])
  @@index([userId, registeredAt])
  @@map("event_registrations")
}

model Rating {
  id        String         @id @default(cuid())
  rating    Int
  type      RatingType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  courseId  String?
  postId    String?
  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  post      CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId, rating])
  @@index([userId, type])
  @@map("ratings")
}

model SecurityLog {
  id        String   @id @default(cuid())
  event     String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([event, createdAt])
  @@index([userId, createdAt])
  @@map("security_logs")
}

model Promotion {
  id                 String                 @id @default(cuid())
  type               PromotionType
  title              String
  description        String?
  ctaText            String
  ctaUrl             String
  imageUrl           String?
  isActive           Boolean                @default(true)
  startDate          DateTime?
  endDate            DateTime?
  priority           Int                    @default(5)
  targetAudience     TargetAudience         @default(ALL)
  maxImpressions     Int?
  currentImpressions Int                    @default(0)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  interactions       PromotionInteraction[]

  @@index([type, isActive])
  @@index([startDate, endDate])
  @@index([priority])
  @@map("promotions")
}

model PromotionInteraction {
  id          String            @id @default(cuid())
  promotionId String
  userId      String?
  action      InteractionAction
  sessionId   String
  pageUrl     String?
  referrer    String?
  userAgent   String?
  createdAt   DateTime          @default(now())
  ipAddress   String?
  promotion   Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user        User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promotionId, action])
  @@index([userId, createdAt])
  @@index([sessionId])
  @@map("promotion_interactions")
}

model UserBehavior {
  id         String   @id @default(cuid())
  userId     String
  action     String
  targetId   String?
  targetType String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, action])
  @@index([targetType, targetId])
  @@index([createdAt])
  @@map("user_behaviors")
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  interests         String[]
  skillLevel        String?
  learningGoals     String[]
  preferredTopics   String[]
  badgeCustomization String? @map("badge_customization") // JSON field for badge preferences
  notificationPreferences String? @map("notification_preferences") // JSON field for notification settings
  privacySettings   String? @map("privacy_settings") // JSON field for privacy settings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Recommendation {
  id         String    @id @default(cuid())
  userId     String
  targetId   String    @map("target_id")
  targetType String    @map("target_type")
  score      Float
  reason     String
  isViewed   Boolean   @default(false) @map("is_viewed")
  isClicked  Boolean   @default(false) @map("is_clicked")
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime? @map("expires_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, targetType])
  @@index([score])
  @@index([expiresAt])
  @@map("recommendations")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String
  points      Int      @default(0)
  badge       String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([createdAt])
  @@map("achievements")
}

enum CourseProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
  ABANDONED
}

enum MembershipLevel {
  FREE
  PREMIUM
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CourseCategory {
  HABILIDADES_IRREMPLAZABLES
  IA_PARA_EMPRENDER
  DESARROLLO_WEB
  MARKETING_DIGITAL
  PRODUCTIVIDAD
  FINANZAS_PERSONALES
  LIDERAZGO
  INNOVACION_TECNOLOGICA
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CommentType {
  COURSE
  POST
  RESOURCE
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PriceType {
  ONE_TIME
  RECURRING
}

enum BillingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum ResourceCategory {
  WEBINAR
  MANUAL
  TUTORIAL
  PAPER
  HERRAMIENTA
  DATASET
  PODCAST
  LIBRO
  EBOOK
  VIDEO
  TEMPLATE
  TOOL
  GUIDE
  CASE_STUDY
  WHITEPAPER
  CHECKLIST
  WORKSHOP
  ULTIMO_WEBINAR
  EN_VIVO
}

enum ResourceType {
  PDF
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  PRESENTATION
  SPREADSHEET
  ARCHIVE
  LINK
  OTHER
}

enum ResourceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EventType {
  LANZAMIENTO
  WORKSHOP
  WEBINAR
  MASTERCLASS
  MEETUP
  CONFERENCE
  COURSE_LAUNCH
  Q_A
  NETWORKING
}

enum RatingType {
  COURSE
  POST
  RESOURCE
}

enum PromotionType {
  PREMIUM_SUBSCRIPTION
  NEW_COURSE
  SPECIAL_OFFER
}

enum TargetAudience {
  ALL
  NON_PREMIUM
  SPECIFIC_COURSE_VIEWERS
  NEW_USERS
}

enum InteractionAction {
  IMPRESSION
  CLICK
  CLOSE
  CONVERSION
}

// =================
// STREAK SYSTEM MODELS
// =================

model UserStreak {
  id                      String   @id @default(cuid())
  userId                  String
  weekStartDate           DateTime
  currentWeekLessons      Int      @default(0)
  currentStreak           Int      @default(0)
  longestStreak           Int      @default(0)
  totalPoints             Int      @default(0)
  lifetimePointsEarned    Int      @default(0)
  isCurrentWeekComplete   Boolean  @default(false)
  lastLessonCompletedAt   DateTime?
  pointsSpentOnRecovery   Int      @default(0)
  recoveryCount           Int      @default(0)
  lastRecoveryUsed        DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStartDate], name: "user_streaks_unique_user_week")
  @@index([userId])
  @@index([weekStartDate])
  @@map("user_streaks")
}

model WeeklyLessonCompletion {
  id                     String   @id @default(cuid())
  userId                 String
  weekStart              DateTime
  courseId               String
  lessonsCompletedInWeek Int      @default(0)
  lastLessonAt           DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, weekStart, courseId], name: "weekly_lesson_completions_unique")
  @@index([userId, weekStart])
  @@index([weekStart])
  @@map("weekly_lesson_completions")
}

model UserStreakBadge {
  id               String           @id @default(cuid())
  userId           String
  badgeLevel       StreakBadgeLevel
  streakWhenEarned Int
  isActive         Boolean          @default(true)
  earnedAt         DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeLevel], name: "user_streak_badges_unique_user_badge")
  @@index([userId])
  @@index([badgeLevel])
  @@map("user_streak_badges")
}

model UserPointsHistory {
  id               String              @id @default(cuid())
  userId           String
  pointsEarned     Int
  transactionType  PointTransactionType
  reason           String
  weekStart        DateTime?
  lessonsCompleted Int?
  coursesUsed      Int?
  createdAt        DateTime            @default(now())
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionType])
  @@map("user_points_history")
}

model StreakRecoveryHistory {
  id                String           @id @default(cuid())
  userId            String
  pointsSpent       Int
  badgeLevel        StreakBadgeLevel
  recoveryReason    String?
  originalStreakLost Int
  weekMissed        DateTime
  recoveredAt       DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recoveredAt])
  @@map("streak_recovery_history")
}

enum StreakBadgeLevel {
  PRINCIPIANTE
  ESTUDIANTE
  DEDICADO
  EN_LLAMAS
  IMPARABLE
  MAESTRO
  LEYENDA
}

enum PointTransactionType {
  WEEKLY_GOAL
  RECOVERY_SPENT
  BONUS_EARNED
  ACHIEVEMENT_REWARD
}

model Webinar {
  id                String           @id @default(cuid())
  title             String
  slug              String           @unique
  description       String
  shortDescription  String?
  imageUrl          String?
  videoUrl          String?
  dateTime          DateTime
  duration          Int              // en minutos
  maxAttendees      Int?
  currentAttendees  Int              @default(0)
  isActive          Boolean          @default(true)
  isFree            Boolean          @default(true)
  price             Decimal          @default(0)
  category          String?
  tags              String[]
  hostName          String?
  hostBio           String?
  zoomLink          String?
  meetingId         String?
  password          String?
  recordingUrl      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  registrations     WebinarRegistration[]

  @@index([dateTime, isActive])
  @@index([category])
  @@index([slug])
  @@map("webinars")
}

model WebinarRegistration {
  id          String   @id @default(cuid())
  webinarId   String
  userId      String?
  email       String
  firstName   String
  lastName    String
  phone       String?
  questions   String?
  isConfirmed Boolean  @default(false)
  reminderSent Boolean  @default(false)
  attended    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  webinar     Webinar  @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([webinarId, email])
  @@index([webinarId, createdAt])
  @@index([email])
  @@map("webinar_registrations")
}
