// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios (Simplificado sin NextAuth)
model User {
  id              String          @id @default(cuid())
  email           String          @unique
  passwordHash    String?         // Opcional para usuarios OAuth
  firstName       String
  lastName        String
  username        String?         @unique
  profileImage    String?
  bio             String?
  membershipLevel MembershipLevel @default(FREE)
  isActive        Boolean         @default(true)
  emailVerified   Boolean         @default(false) // Requiere verificación
  verificationCode String?        // Código de verificación de 6 dígitos
  verificationExpires DateTime?   // Fecha de expiración del código
  stripeCustomerId String?        @unique // ID del cliente en Stripe
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastLogin       DateTime?

  // Relaciones existentes
  comments        Comment[]
  questions       Question[]
  enrollments     Enrollment[]
  posts           CommunityPost[]
  likes           Like[]
  sessions        Session[]
  courses         Course[]        @relation("CourseInstructor")
  payments        Payment[]
  subscriptions   Subscription[]

  @@map("users")
}

// Modelo de Sesiones (Existente - mantener para compatibilidad)
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id               String       @id @default(cuid())
  title            String
  slug             String       @unique
  description      String?
  shortDescription String?
  imageUrl         String?
  price            Decimal      @default(0)
  isFree           Boolean      @default(true)
  requiresAuth     Boolean      @default(true)

  difficulty       Difficulty?
  durationHours    Int?
  lessonsCount     Int          @default(0)
  studentsCount    Int          @default(0)
  rating           Decimal      @default(0)
  status           CourseStatus @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  instructorId     String?
  comments         Comment[]
  instructor       User?        @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments      Enrollment[]
  lessons          Lesson[]
  payments         Payment[]

  @@map("courses")
}

model Comment {
  id         String         @id @default(cuid())
  content    String
  type       CommentType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String
  courseId   String?
  parentId   String?
  questionId String?
  postId     String?
  course     Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent     Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]      @relation("CommentReplies")
  post       CommunityPost? @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  question   Question?      @relation("QuestionComments", fields: [questionId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      Like[]

  @@map("comments")
}

model Question {
  id        String         @id @default(cuid())
  title     String
  content   String
  category  String?
  status    QuestionStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  answers   Comment[]      @relation("QuestionComments")
  likes     Like[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model CommunityPost {
  id        String    @id @default(cuid())
  title     String
  content   String
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[] @relation("PostComments")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@map("community_posts")
}

model Enrollment {
  id                 String           @id @default(cuid())
  enrolledAt         DateTime         @default(now())
  completedAt        DateTime?
  progressPercentage Decimal          @default(0)
  status             EnrollmentStatus @default(ACTIVE)
  userId             String
  courseId           String
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Like {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  userId     String
  commentId  String?
  questionId String?
  postId     String?
  comment    Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post       CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  question   Question?      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, questionId, postId])
  @@map("likes")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  duration  Int?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

enum MembershipLevel {
  FREE
  PREMIUM
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CommentType {
  FORUM
  QUESTION
  COURSE_COMMENT
}

enum QuestionStatus {
  OPEN
  CLOSED
  RESOLVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// Modelos para Stripe
model Payment {
  id                String   @id @default(cuid())
  stripePaymentId   String   @unique
  amount            Int      // Cantidad en centavos
  currency          String   @default("usd")
  status            PaymentStatus
  paymentMethod     String?
  description       String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  courseId          String?
  subscriptionId    String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course?  @relation(fields: [courseId], references: [id])
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model Subscription {
  id                String   @id @default(cuid())
  stripeSubscriptionId String @unique
  status            SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  canceledAt        DateTime?
  endedAt           DateTime?
  trialStart        DateTime?
  trialEnd          DateTime?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  priceId           String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  price             Price    @relation(fields: [priceId], references: [id])
  payments          Payment[]

  @@map("subscriptions")
}

model Product {
  id                String   @id @default(cuid())
  stripeProductId   String   @unique
  name              String
  description       String?
  active            Boolean  @default(true)
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  prices            Price[]

  @@map("products")
}

model Price {
  id                String   @id @default(cuid())
  stripePriceId     String   @unique
  active            Boolean  @default(true)
  currency          String   @default("usd")
  type              PriceType
  unitAmount        Int?     // Cantidad en centavos
  interval          BillingInterval?
  intervalCount     Int?
  trialPeriodDays   Int?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]

  @@map("prices")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PriceType {
  ONE_TIME
  RECURRING
}

enum BillingInterval {
  DAY
  WEEK
  MONTH
  YEAR
}
